generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  passwordHash     String
  refreshTokenHash String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  businessProfile  BusinessProfile?
  documents        Document[]
  documentVersions DocumentVersion[] @relation("DocumentVersionUploader")
  notifications    Notification[]
}

model BusinessProfile {
  id             String              @id @default(uuid())
  userId         String              @unique
  businessName   String
  businessType   BusinessType
  businessScale  BusinessScale
  province       String?
  city           String?
  address        String?
  industryTags   String[] @default([])
  completedAt    DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  permits        BusinessPermitProfile[]
  documents     Document[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BusinessPermitProfile {
  id                  String         @id @default(uuid())
  businessProfileId   String
  permitType          PermitType
  formData            Json?
  fieldChecklist      Json?
  documents           Json?
  isChecklistComplete Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  businessProfile BusinessProfile @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)

  @@unique([businessProfileId, permitType])
  @@index([permitType])
}

model Document {
  id               String             @id @default(uuid())
  userId           String
  businessProfileId String?
  permitType       PermitType?
  label            String?
  currentVersionId String? @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessProfile  BusinessProfile?   @relation(fields: [businessProfileId], references: [id], onDelete: SetNull)
  currentVersion   DocumentVersion?   @relation("CurrentDocumentVersion", fields: [currentVersionId], references: [id])
  versions         DocumentVersion[]

  @@index([userId])
  @@index([businessProfileId])
}

model DocumentVersion {
  id               String           @id @default(uuid())
  documentId       String
  version          Int
  storageKey       String           @unique
  originalFilename String
  mimeType         String
  size             BigInt
  checksum         String?
  notes            String?
  metadata         Json?
  uploadedBy       String?
  createdAt        DateTime         @default(now())

  document         Document         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  uploader         User?            @relation("DocumentVersionUploader", fields: [uploadedBy], references: [id], onDelete: SetNull)
  currentFor       Document?        @relation("CurrentDocumentVersion")

  @@unique([documentId, version])
  @@index([uploadedBy])
}

model Notification {
  id            String                  @id @default(uuid())
  userId        String
  type          NotificationType
  title         String
  message       String
  payload       Json?
  status        NotificationStatus      @default(UNREAD)
  readAt        DateTime?
  sentAt        DateTime                @default(now())
  emailStatus   NotificationEmailStatus @default(PENDING)
  emailSentAt   DateTime?
  emailError    String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([emailStatus])
}

enum NotificationType {
  ACCOUNT_REGISTERED
  BUSINESS_PROFILE_COMPLETED
  DOCUMENT_UPLOADED
  DOCUMENT_REPLACED
  PAYMENT_REMINDER
  CHECKLIST_READY
  GENERIC
}

enum NotificationStatus {
  UNREAD
  READ
}

enum NotificationEmailStatus {
  PENDING
  SENT
  FAILED
  SKIPPED
}

enum BusinessType {
  FOOD_BEVERAGE
  TECH_STARTUP
  SERVICES
  MANUFACTURING
  RETAIL
  OTHER
}

enum BusinessScale {
  MICRO
  SMALL
  MEDIUM
  LARGE
}

enum PermitType {
  HALAL
  PIRT
  BPOM
}
